.. deadline4.rst

**********************
DEADLINE
********************** 

.. toctree::
  :hidden:
  
  deadline8
  deadline9             

.. image:: deadline4.*

As they say, material wins games, but structure wins *championships*.  Like Cage, the first choice I will make is between silence and not.  So, you use ``rand_collect_length`` to generate a structure that lasts 9 minutes, rounds, overshoots, and choses mostly very short but some veeeerry long sections.  To do this, yo use the ``g0integrator`` function of a ``PiecewisePolynomial`` generated by the ``bs`` function in ``polyu``.  Then, we'll just alternate silence-sound-silence-sound.  And we're off! ::

	>>> pdf = polyu.bpcd((0,0),(1,20.,1),(1,0,0),(7,1,1),(2.5,3,1),(2.5,0,0),pw=3).normalizeIntegral()
	>>> def silence_sound() :
	... 	b = rand_collect_length(9., lambda out, x : pdf.g0integrator(x,n=True), i=False)
	... 	for x in range(len(b)) : print "SILENCE" if not x%2 else "SOUND", b[x]
	...		return b
	... 
	>>> recolte=silence_sound()
	SILENCE 1.75540962702
	SOUND 1.86878402649
	SILENCE 6.97787349063
	>>> recolte=silence_sound()
	SILENCE 1.06360503994
	SOUND 1.68670915681
	SILENCE 1.49390791195
	SOUND 1.44804408979
	SILENCE 7.97878284455
	>>> recolte=silence_sound()
	SILENCE 1.10348186355
	SOUND 1.03576533502
	SILENCE 0.950791739583
	SOUND 1.32084935829
	SILENCE 1.51168336599
	SOUND 1.13516837811
	SILENCE 0.67565318376
	SOUND 1.4515591866
	>>> recolte=silence_sound()
	SILENCE 5.83206775474
	SOUND 1.21199078704
	SILENCE 0.3889351191
	SOUND 1.393416323192
	SILENCE 0.818613660978
	SOUND 0.927148044489
	
This last example is uncomfortably attractive.  Throw it into your graph so that you remember it! ::

	>>> g.av(ng('silence',name=True))
	>>> g.av(ng('sound', name=True))
	>>> su = ng('structural unit')
	>>> g.ae(silence,trio,sb(su))
	>>> g.ae(sound,trio,sb(su))
	>>> ng('order', name=True)
	<class 'organdiae.core.core.order'>
	>>> realdeal = order()
	>>> siso = [sound(recolte[x]) if x%2 else silence(recolte[x]) for x in range(len(recolte))]
	>>> ng('follows', name=True)
	>>> realdeal.av(siso[0])
	>>> for x in range(1,len(siso)) : realdeal.ae(siso[x-1],siso[x],sb(follows))
	>>> g.av(realdeal)
	>>> pick() # Never forget to save!
	WRITING realdeal TO trio.oie
	WRITING g TO trio.oie
	
The idea of such a long silence is haunting.  You want to use it.  But like Soulages with black, you feel compelled to create shades of silence.  So, you give Organdiae the following materials ::

	>>> simat = [ng(x) for x in ['bowing body of instrument', 'lightly tapping on instrument', 'above the bridge pizz']]
	>>> sigraph = DiGraph('silence materials')
	>>> for x in simat : sigraph.av(x)
	>>> g.av(sigraph)
	
	
You write a little algorithm to generate orders given the silences you've chosen ::

	>>> def gimme_silence(b,sil) :
	... 	out = [(random.choice(sil), b[x]) for x in range(len(b)) if not x%2]
	...		for x in out : print x[0].ilsagitde, x[1]
	...		return out
	... 
	>>> sitypes = gimme_silence(recolte,simat)
	bowing body of instrument 5.83206775474
	lightly tapping on instrument 0.3889351191
	lightly tapping on instrument 0.818613660978
	>>> sitypes = gimme_silence(recolte,simat)
	bowing body of instrument 5.83206775474
	lightly tapping on instrument 0.3889351191
	lightly tapping on instrument 0.818613660978
	>>> sitypes = gimme_silence(recolte,simat)
	bowing body of instrument 5.83206775474
	bowing body of instrument 0.3889351191
	lightly tapping on instrument 0.818613660978	

And you go with this last result.  A little recapitulative algorithm inscribes the final order of the work in Organdiae ::

	>>> genre = ng('genre')
	>>> for x in range(len(siso)) :
	... 	if not x%2 : realdeal.ae(siso[x], sitypes[x/2][0], sb(genre))
	... 
	>>> pick()
	WRITING sigraph TO trio.oie
	WRITING realdeal TO trio.oie
	WRITING g TO trio.oie
	>>> gv(g, path='enfin')

Now, using this graph, it's time to do a bit of composin'.  Go get em!



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

.. note::
  It's ok to cheat...click here to see :download:`all possible options <deadlineOPS.svg>`.
  Also, if you want to download the source code up until this point, click :download:`here <deadline4.rst.py>`.
