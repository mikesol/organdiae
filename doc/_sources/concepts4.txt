.. concepts4

.. _fourth-concept:

Edges Part II (Getting Edgier)
==============================

The above-elucidated concept of edge-construction (and the tiny size of the implementing code) is inspired by libraries such as JGraph and JUNG.  What makes edges in Organdiae different, however, is that her edges can carry multiple channels of information between two vertices.  Or, for the mixing-board-inclined user, each edge is a group of busses between two nodes.

Let us define a new graph and populate it with edges that use a bus called temporalGap.

	>>> flam = ng('flam')
	>>> paradiddle = ng('single paradiddle')
	>>> drag = ng('single drag')
	>>> ruff = ng('ruff')
	>>> ratamacue = ng('single ratamacue')
	>>> ng('temporalGap', name=True, return_type = PiecewisePolynomial)
	<class 'organdiae.core.core.temporalGap'>
	>>> follows = ng('follows')
	>>> rudiments = DiGraph(filters=[Tree])
	>>> finalruff = ruff()
	>>> tree_order = [flam(),[drag(),ruff(),[ratamacue(), paradiddle(), [paradiddle()], flam(), [ratamacue(), drag(), [flam(), [ratamacue(), drag(), [finalruff]]]]]]]
	>>> def make_tree(graph, order, v=None) :
	>>> 	for x in range(len(order)) :
	...			if type(order[x]) != type([]) :
	... 			if v == None : graph.av(order[x])
	...				else : graph.ae(v, order[x], sb(follows, nbuses=['temporalGap']))
	...			else :
	... 			make_tree(graph, order[x], order[x-1])
	... 
	>>> make_tree(rudiments, tree_order)
	>>> rudiments.p()
	VERTICES
	     0. single drag (hash 7761840)
	     1. ruff (hash 7761872)
	     2. single ratamacue (hash 7761904)
	     3. single paradiddle (hash 7823408)
	     4. single paradiddle (hash 7823440)
	     5. flam (hash 7823472)
	     6. single ratamacue (hash 7823504)
	     7. single drag (hash 7823536)
	     8. flam (hash 7823568)
	     9. single ratamacue (hash 7823600)
	     10. single drag (hash 7823632)
	     11. flam (hash 7761808)
	     12. ruff (hash 7761776)
	EDGES
	     0. flam (hash 7761808) --> ruff (hash 7761872)
	     1. single paradiddle (hash 7823408) --> single paradiddle (hash 7823440)
	     2. flam (hash 7823472) --> single drag (hash 7823536)
	     3. flam (hash 7823568) --> single drag (hash 7823632)
	     4. single drag (hash 7823536) --> flam (hash 7823568)
	     5. ruff (hash 7761872) --> single ratamacue (hash 7761904)
	     6. ruff (hash 7761872) --> flam (hash 7823472)
	     7. flam (hash 7761808) --> single drag (hash 7761840)
	     8. single drag (hash 7823632) --> ruff (hash 7761776)
	     9. ruff (hash 7761872) --> single paradiddle (hash 7823408)
	     10. flam (hash 7823472) --> single ratamacue (hash 7823504)
	     11. flam (hash 7823568) --> single ratamacue (hash 7823600)
	>>> gv(rudiments, path='rudiments', program='dot')

.. image:: rudiments.*

Here, instances five different sonic "materials" are connected with edges tagged "follows", each of which contains a bus for "temporalGap" (``sb``, knowing that temporal gap is numerical because it is passed in as an ``nbus``, assigns a temporal gap of 0 with a probability of 1 for starters).  One may think of it as a sketch for several possible orderings of materials.  Now, let's say that whenever a drag follows a flam, we want the temporal gap to be a "two-humped" probability distribution function (PDF) ranging from 0 to 4 with its peaks at 1.5 and 3.0 and a trough at 2.  Otherwise, we want the temporal gap to be a descending PDF ranging from 1 to 3 ::

	>>> for e in rudiments._e :
	... 	if isinstance(e._v1,flam) & isinstance(e._v2,drag) :
	...			e._f[temporalGap].args = (PiecewisePolynomial([Polynomial((0.,1./3)), Polynomial((2., -1.)),Polynomial((-1.,1./2)),Polynomial((2.,-1./2))],[0.0,1.5,2.0,3.0,4.0],[],[]),)
	... 	else :
	... 		e._f[temporalGap].args = (PiecewisePolynomial([Polynomial((1.5,-1./2))],[1.0,3.0],[],[]),)
	... 

Now, the temporal gap between the first flam and the rest of the events can be calculated as such ::

	>>> Crawler.crawl_with_subgraphs([rudiments], [[tree_order[0]]], [[temporalGap]], [[PiecewisePolynomial([],[],[Impulse(1.0)],[0.])]])

A visualization of the PDF of the ruff on the tree's lowermost rung is obtained by writing to a GNUplot readable file (and invoking GNUPlot, which Organdiae doesn't do) ::

	>>> for e in rudiments._e :
	... 	if e._v2 == finalruff :
	... 		e._cf[temporalGap].toGNUPlot('finalRuff1.gnu')
	... 		break
	... 

.. image :: finalRuff1.*

We can see that the final ruff will fall anywhere between 4 and 20 seconds after the first flam.  However, what if we wanted to know how far the final ruff will fall after the second flam in its path?  We can invoke Crawler again, this time calculating the tree from a new starting point ::

	>>> Crawler.crawl_with_subgraphs([rudiments], [[tree_order[1][2][3]]], [[temporalGap]], [[PiecewisePolynomial([],[],[Impulse(1.0)],[0.])]])

Again, a visualization of the PDF of the ruff on the tree's lowermost rung is obtained by via gnuplot is ::

	>>> for e in rudiments._e :
	... 	if e._v2 == finalruff :
	... 		e._cf[temporalGap].toGNUPlot('finalRuff2.gnu')
	... 		break
	...

.. image :: finalRuff2.*

More generally, the crawler algorithm works for any OneConnected graph, or more precisely, it stops any time it revisits a node along the same path (it would be crawling forever otherwise).

Under the hood of the crawler algorithm is convolution method for piecewise polynomials [Polge73]_.  For any user of Organdiae wishing to model numerical uncertainty, said algorithm provides a computationally inexpensive way to express this uncertainty (approximately *O((xy)^2)*, where *x* is the degree of the highest polynomial in the piecewise polynomial and *y* is the number of piecewise polynomials).  This takes trivial computational time compared to direct convolution and is more versatile than convolution via DFTs, which assumes periodicity.  The source code, which is clean as a whistle, gives you indications on how to make advanced convolution functions using multiple variables that may or may not be ``PiecewisePolynomial`` instances (you can basically do anything Python can do), but for most users, basic usages like the above example are enough to make sophisticated models.

.. [Polge73] Polge, RJ and Hayes, RD. "Numerical Technique for the Convolution of Piecewise Polynomial Functions". 1973. IEEE Transactions on Computers, Vol. C-22, No. 11, 970-975.

Organdiae's creators believe that modelizations of uncertainty are crucial to the creative process.  Whether or not said uncertainty is then included in an actual creation (ie a musical composition with a degree of indeterminacy) is up to the user.  Rather, as a precompositional tool, Organdiae exists to answer questions such as "what would be the potential temporal profile of a system where...?".  For the percussion composer above, he now knows that by following his rule system above, when (or rather if) the final ruff is arrived at, it has a decent chance of happening around 10 seconds with mild kertosis to the right.

